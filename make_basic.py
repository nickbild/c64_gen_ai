####
# Nick Bild
# April 2024
# https://github.com/nickbild/c64_gen_ai
#
# Produce BASIC code for Commodore 64 that uses a probabilistic PCA to create an 8x8 character sprite.
####

# Pre-calculated values.
weight_ml = [-0.02289563786367403,0.04788574074005517,-0.04338900612325414,-0.0002264455238377659,-0.000681425179084801,-0.07375733723578375,0.01790338053619964,-0.01681255080892163,0.04850062600198579,-0.016257371466352546,-0.06044066259834021,-0.12358155321946052,-0.14425804517566507,-0.08118624043689857,-0.04734561137851203,0.03596849509249256,0.17180256595818236,-0.062003759830326625,-0.10555352957587996,-0.16618670968907537,-0.19243311610761765,-0.1272413461382247,-0.058575098979003176,0.16202003072235577,0.2736276442283937,0.040963661803381214,0.16293716977163278,-0.11800162038968047,-0.11795927117172365,0.14696485486105829,0.0412432100282234,0.26306982665510253,0.23710697967662853,0.08332370556019375,-0.056076849019003304,-0.12480039529717103,-0.14934530789458803,-0.07759051929611246,0.06672342528716976,0.25003197492745766,0.6677194219286865,0.07232777962862562,-0.0013898965083916732,-0.0324571787889155,-0.06043396819683592,0.007688698650858505,0.07842172721972306,0.2402099520855968,0.13683826282226047,0.16365129314848426,-0.2911610254064476,0.14420872175265906,0.1078085075921067,-0.28498687597953903,0.17139361315449048,0.13263097126820542,0.026148500238057606,-0.08571532216075423,-0.13939978787898813,0.09672169736966507,0.148132939062624,-0.19281516961059625,-0.08163748585159003,0.01493153619564563]
mu_ml = [0.26766122164467154,0.22707361788541428,0.47062262611773065,0.7480076506002458,0.7430017247409222,0.5418510890896461,0.25003079917775023,0.22765822686377965,0.4045780489245928,0.4283949176073659,0.5079606130323673,0.5923877181411297,0.5864888580987627,0.47168205141500535,0.4966224930450391,0.38742249608849655,0.5127859366122334,0.634319334618622,0.6896206023899798,0.726219305138149,0.7610242223997432,0.6944936810137431,0.6613277133282751,0.5096060459441665,0.571039025475233,0.5886205631032023,0.8224597929605655,0.8997905134618595,0.9253789827670222,0.8446960519915817,0.5477847720944181,0.5447081245795794,0.5477112138937514,0.43867071702184984,0.5996465109202246,0.7316349956853719,0.755927979577273,0.6231352792089759,0.4197910306380448,0.4930307128001232,0.4795446421327367,0.36346530263765137,0.6794981241960304,0.6571135565937894,0.6663041910791376,0.6726631915634939,0.3059014073026589,0.40372344851074754,0.25157521556327644,0.42840737626332687,0.5067111869815115,0.4945968176364517,0.4136576486917777,0.5866096883769278,0.3830231897101366,0.2799332644424375,0.2877666945142571,0.5044333099555959,0.6456133083132601,0.49501975252723374,0.4099654210072576,0.6773641040488466,0.5178374228514223,0.28558777910286354]
covariance = 0.4597599993922977

# Number of iterations of the algorithm.
# Larger numbers give better results, but can be slow.
iterations = 94


##
# Print out the BASIC code.
##

print("1 print \"c64 image generator\"")
print("2 print \"starting up...\"")
print("5 dim we(63)")
print("8 dim mu(63)")

start_line = 10

cnt = 0
for w in weight_ml:
    print("{0} we({1}) = {2}".format(start_line, cnt, w))
    cnt += 1
    start_line += 1

cnt = 0
for m in mu_ml:
    print("{0} mu({1}) = {2}".format(start_line, cnt, m))
    cnt += 1
    start_line += 1

print("{0} dim av(63)".format(start_line))
start_line += 3

print("{0} dim me(63)".format(start_line))
start_line += 3

print("{0} dim z(63)".format(start_line))
start_line += 3

print("""
195 for cn=0 to 63: av(cn)=0.0: next cn

200 for i=0 to {0}

201 pp = i+1
202 print "iteration " + str$(pp) + " of " + str$({1})

205 for cn=0 to 63
215 sn = rnd(0)
220 if sn<0.5 then mm=rnd(0)*3.5
221 if sn>=0.5 then mm=rnd(0)*-3.5
222 me(cn)=we(cn)*mm+mu(cn)
225 next cn

230 for cn=0 to 63
235 z(cn)=rnd(0)*2.2
240 sn = rnd(0)
245 if sn<0.5 then z(cn)=z(cn)*-1
250 next cn

255 rs=0.0
260 for j=0 to 63

265 tt=0.0
270 for k=0 to 63
275 cv=0.0
280 if j=k then cv={2}
285 tt=tt+cv*z(j)
290 next k

295 rs = me(j)+tt
300 av(j)=av(j)+rs
305 next j


350 next i


375 poke 646,2
377 poke 53280,0
379 poke 53281,0

420 for i=1024 to 2023
425 poke i,96
430 next i


470 for i=1280 to 1287
472 v=av(0+i-1280) / {1}
473 if v>0.5 then poke i,224
475 next i

480 for i=1320 to 1327
482 v=av(8+i-1320) / {1}
483 if v>0.5 then poke i,224
485 next i

490 for i=1360 to 1367
492 v=av(16+i-1360) / {1}
493 if v>0.5 then poke i,224
495 next i

500 for i=1400 to 1407
502 v=av(24+i-1400) / {1}
503 if v>0.5 then poke i,224
505 next i

510 for i=1440 to 1447
512 v=av(32+i-1440) / {1}
514 if v>0.5 then poke i,224
515 next i

520 for i=1480 to 1487
522 v=av(40+i-1480) / {1}
523 if v>0.5 then poke i,224
525 next i

530 for i=1520 to 1527
532 v=av(48+i-1520) / {1}
533 if v>0.5 then poke i,224
535 next i

540 for i=1560 to 1567
542 v=av(56+i-1560) / {1}
543 if v>0.5 then poke i,224
545 next i

690 goto 690

800 end

""".format(iterations-1, iterations, covariance))
